<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.alba.dao.IAlbaDAO">

<sql id="searchFrag"> <!-- 중복되는 코드를 넣는다. -->
	<where> <!-- 아래 조건절을 하나이상 만족하면 이 키워드 사용 -->
			<if test="searchVO!=null">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
				<!-- OGNL언어 @class@method(args).  검색키워드가 있으면..-->
					<choose> 
						<when test="'id'.equals(searchVO.searchType)">
							AL_ID Like '%' || #{searchVO.searchWord} || '%'
						</when>
						<when test="'name'.equals(searchVO.searchType)">
							AL_NAME Like '%' || #{searchVO.searchWord} || '%'
						</when>
						<when test="'career'.equals(searchVO.searchType)">
							AL_CAREER Like '%' || #{searchVO.searchWord} || '%'
						</when>
						<otherwise>
							AL_ID Like '%' || #{searchVO.searchWord} || '%'
							OR AL_NAME Like '%' || #{searchVO.searchWord} || '%'
							OR AL_CAREER Like '%' || #{searchVO.searchWord} || '%'
						</otherwise>
					</choose>
				</if>
			</if>
			</where>
	</sql>
<select id="selectAlbaCount" resultType="int">
		SELECT COUNT(*) 
		FROM ALBA
		<include refid="searchFrag" />
</select>

<select id="selectAlbaList" resultType="albaVO" parameterType="pagingVO">
	
	SELECT B.*
	FROM (SELECT ROWNUM RNUM, A.*
	     FROM
		(SELECT AL_ID,AL_NAME,AL_AGE,AL_ADDRESS,
				AL_HP,AL_SPEC,GR_CODE,AL_CAREER,
				AL_GEN,AL_BTYPE,AL_MAIL
		FROM ALBA
		<include refid="searchFrag" />
		ORDER BY AL_ID DESC
		) A) B
	WHERE RNUM BETWEEN #{startRow} AND #{endRow}
</select>

<resultMap type="albaVO" id="albaMap" autoMapping="true">
	<id property="al_id" column="AL_ID"/>
	<collection property="licAlbaList" javaType="java.util.List" ofType="licAlbaVO" autoMapping="true" />
</resultMap>
<select id="selectAlba" parameterType="string" resultMap="albaMap">
	SELECT A.AL_ID,A.AL_NAME,A.AL_AGE,A.AL_ADDRESS,
		   A.AL_HP,A.AL_SPEC,A.GR_CODE,B.GR_NAME,A.AL_CAREER,
		   A.AL_GEN,A.AL_BTYPE,A.AL_MAIL,
		   C.LIC_CODE, D.LIC_NAME
	FROM ALBA A JOIN GRADE B ON (A.GR_CODE = B.GR_CODE)
	            LEFT JOIN LIC_ALBA C ON (A.AL_ID = C.AL_ID)
	            LEFT JOIN LICENSE D ON (C.LIC_CODE = D.LIC_CODE)
	WHERE A.AL_ID = #{al_id}
</select>

<insert id="insertAlba" parameterType="albaVO">
	<selectKey resultType="string" keyProperty="al_id" order="BEFORE">
		SELECT 'ALBA_' || LPAD(NVL(MAX(SUBSTR(AL_ID,6))+1, 0),3,'0')
		FROM ALBA
	</selectKey>
	INSERT INTO ALBA (
		AL_ID,AL_NAME,  AL_AGE,
	    AL_ADDRESS,  AL_HP,   AL_SPEC,
	    AL_DESC,   GR_CODE,   AL_CAREER,
	    AL_GEN,   AL_BTYPE,   AL_MAIL
		) 
		
		VALUES (
		  	 #{al_id, jdbcType=VARCHAR},
			 #{al_name, jdbcType=VARCHAR},
			 #{al_age, jdbcType=INTEGER},
			 #{al_address, jdbcType=VARCHAR},
			 #{al_hp, jdbcType=VARCHAR},
			 #{al_spec, jdbcType=VARCHAR},
			 #{al_desc, jdbcType=VARCHAR},
			 #{gr_code, jdbcType=VARCHAR},
			 #{al_career, jdbcType=VARCHAR},
			 #{al_gen, jdbcType=VARCHAR},
			 #{al_btype, jdbcType=VARCHAR},
			 #{al_mail, jdbcType=VARCHAR}
		  	
		)
</insert>

<update id="updateAlba" parameterType="albaVO">
	UPDATE ALBA
	SET  
	    AL_ADDRESS = #{al_address, jdbcType=VARCHAR},  
	    AL_HP = #{al_hp, jdbcType=VARCHAR},   
	    AL_SPEC = #{al_spec, jdbcType=VARCHAR},
	    AL_DESC = #{al_desc, jdbcType=VARCHAR},   
	    GR_CODE = #{gr_code, jdbcType=VARCHAR},   
	    AL_CAREER = #{al_career, jdbcType=VARCHAR},   
	    AL_MAIL = #{al_mail, jdbcType=VARCHAR}
	    , AL_NAME = #{al_name, jdbcType=VARCHAR}
	    , AL_AGE = #{al_age, jdbcType=INTEGER}
	    , AL_GEN =  #{al_gen, jdbcType=VARCHAR}
	    , AL_BTYPE = #{al_btype, jdbcType=VARCHAR}
	WHERE AL_ID = #{al_id}
</update>

<select id="selectGrade" resultType="gradeVO">
	SELECT GR_CODE, GR_NAME
	FROM GRADE
</select>

<select id="selectLIC" resultType="licAlbaVO">
	SELECT LIC_CODE, LIC_NAME
	FROM LICENSE
</select>


<delete id="deleteAlba" parameterType="string">
	DELETE FROM ALBA
	WHERE AL_ID = #{al_id}
</delete>

</mapper>





